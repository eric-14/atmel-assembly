/*
 * AVRAssembler1.asm
 *
 *  Created: 8/8/2022 1:04:42 PM
 *   Author: Eric
 */ 


 .include "m328Pdef.inc"

 .org 0x00
 .def i = r18
 .def seg1 = r28
 .def seg2 = r29
 .def seg3 = r30
 .def seg4 = r31
 /*
NUMBER OF CYCLES IN THE DELAY FUNCTION IS 10

1 SECOND == 1,600,000 CYCLES 
*/
.MACRO DELAY
		LDI R16,@0
		 
		LOOP1: LDI R17,@1
		LOOP2: LDI R18, @2
		LOOP3:	NOP
				DEC R18
				BRNE LOOP3
				DEC R17
				BRNE LOOP2 
				DEC R16
				BRNE LOOP1
				

.ENDMACRO

.MACRO DISPLAY_VALUE 


		//SELECT THE 7 -SEGMENT TO DISPLAY THE VALUE 
		LDI R18, @1
		OUT PORTB, R18

		//VALUE TO DISPLAY
		LDI R17, @0
		OUT PORTD,R17

		DELAY 2,2,2

.ENDMACRO

.MACRO DISPLAY_VALUE1


		//SELECT THE 7 -SEGMENT TO DISPLAY THE VALUE 

		OUT PORTB,  @0

		//VALUE TO DISPLAY
		LDI R17, @1
		OUT PORTD,R17

		DELAY 2,2,2
.ENDMACRO
				

 MAIN:
	//DECLARING THE STACK 
	LDI R16,HIGH(RAMEND)
	OUT SPH,R16 
	LDI R17,LOW(RAMEND)
	OUT SPL,R17

	CLR R16 
	CLR R17 

	ldi r16,0x1
	ldi r17,0x2 

	//SELECT THE 7 -SEGMENT TO DISPLAY VALUE 
	LDI R16, 0XFF // ALL PINS IN PORTD ARE OUTPUT PINS 
	OUT DDRD, R16 

	//SET THE FIRST 4 PINS OF PORTB AS OUPUT 
	LDI R17, (1<<PB0)|(1<<PB1)|(1<<PB2)|(1<<PB3)
	OUT DDRB , R17 


	
	DISPLAY_VALUE 0b10011111, 0B00000001 //E
	DELAY 1, 1,1
    DISPLAY_VALUE 0b11101110, 0B00000010 //A
	DELAY 1, 1,1
	DISPLAY_VALUE 0b00001100, 0B00000100 //I
	DELAY 1, 1,1
	DISPLAY_VALUE 0B10011100, 0B00001000//C
	


//CALL READ_ANALOG_VALUE


lp1:
	CALL READ_ANALOG_VALUE

	/*
		R20 -- ADCL 
		R21 -- ADCH

		IF THE VALUE OF 
	*/
	//GETTING THE ADCL VALUE
	mov R17, R20 
div100: 
	subi r17, 100
	inc i 
	cpi r17, 100
	brsh div100
	mov seg3, i
	clr i
	

	DELAY 1, 1, 1
	display_value1 seg3, 0b00000100
div: 
	subi r17, 10
	inc i 
	cpi r17, 10

	brsh div 
	mov seg2, r17

	DELAY 1, 1, 1
	display_value1  seg2,0b000000010

	clr i
div1: 
	subi r17, 0x1
	inc i 
	cpi r17, 0x1
	brsh div1
	mov seg1, r17


	
	display_value1 seg1, 0b000000001

//GETTTING VALUES FROM ADCH 
		//GETTING THE ADCL VALUE
	mov R17, R21 

	CLR i
	LDI R19, 1

	mov r17, r21
div2: 
	subi r17, 0x1
	inc i 
	cpi r17, 0x1
	brsh div2

	mov seg4, i

	DELAY 1, 1, 1
	display_value1  seg4,0b00001000


	//DELAY 1, 3,2
	LDI R16 , (1<<PC1)
	OUT DDRC ,R16

	CPI R21, 0B0000000  // IF THE VALUE OF THE REGISTERS IS ABOVE 512 TUN_MOTOR
	BREQ MOTOR_STOP
	BRPL LP2

	
	
	

	
JMP lp1

LP2:
	CPI R21, 0B0000010
	BRGE RUN_MOTOR 
	RET

RUN_MOTOR:
	LDI R16, (1<<PC1)
	OUT PORTC , R16 
	RET

MOTOR_STOP: 
	LDI R16, (0<<PC1)
	OUT PORTC,R16
	RET



//SUB ROUTINE TO READ ANALOG VALUES 	
READ_ANALOG_VALUE: 
			//SET ADMUX USING AVCC VOLTAGE AND AVREF HAVING A CAPACITOR USING ADC0
			LDI R16 , (0<<REFS1)|(1<<REFS0)
			STS ADMUX, R16 

			//ENABLING THE ADCSRA REGISTER WITH A 64 PRESCALER
			LDI R16 , (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)
			STS ADCSRA, R16 
			//START CONVERSION
			LDS R17,ADCSRA
		
			LDI R16,(1<<ADSC)
			OR R16,R17
			STS ADCSRA,R16
			CALL WAIT_FOR_INPUT 

			RET 
WAIT_FOR_INPUT:	
			LDS R17, ADCSRA
			SBRS R17, 6//INTERRUPT FLAG THAT IS SET WHEN CONVERSION IS COMPLETE
			RJMP WAIT_FOR_INPUT 
			
			LDS R20, ADCL 
			LDS R21, ADCH
			RET 
 

